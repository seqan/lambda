name: Lambda CI on Linux

on:
  push:
  pull_request:

env:
  SHARG_NO_VERSION_CHECK: 1
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "gcc12 bifm"
            install: "g++-12"
            cxx: "g++-12"
            cmake_flags: "-DLAMBDA_WITH_BIFM=1"
            cc: "gcc-12"
            build_type: Release

          - name: "gcc13"
            install: "g++-13"
            cxx: "g++-13"
            cc: "gcc-13"
            build_type: Release

          - name: "gcc12"
            install: "g++-12"
            cxx: "g++-12"
            cc: "gcc-12"
            build_type: Release

          - name: "gcc11"
            install: "g++-11"
            cxx: "g++-11"
            cc: "gcc-11"
            build_type: Release

          - name: "clang_format"
            install: "g++-11 clang-format-14"
            cxx: "g++-11"
            cc: "gcc-11"
            build_type: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: lambda
          fetch-depth: 1
          submodules: recursive

      - name: Add package source
        continue-on-error: true
        run: |
          echo 'APT::Acquire::Retries "5";' | sudo tee -a /etc/apt/apt.conf.d/80-retries > /dev/null
          sudo add-apt-repository --no-update --yes ppa:ubuntu-toolchain-r/ppa
          sudo add-apt-repository --no-update --yes ppa:ubuntu-toolchain-r/test
          sudo apt-get update

      - name: Install CMake
        run: sudo apt-get install --yes cmake

      - name: Install ccache
        run: sudo apt-get install --yes ccache

      - name: Install compiler ${{ matrix.install }}
        run: sudo apt-get install --yes ${{ matrix.install }}

      - name: Load ccache
        if: matrix.name != 'clang_format'
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ runner.os }}-${{ matrix.name }}-ccache-

      - name: Tool versions
        run: |
          env cmake --version
          env ${{ matrix.cxx }} --version

      - name: Configure tests
        env:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        run: |
          mkdir build
          cd build
          cmake ../lambda -DLAMBDA_COMPILE_THREADS=2 -DLAMBDA_NATIVE_BUILD=OFF ${{ matrix.cmake_flags }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

      - name: Build tests
        if: matrix.name != 'clang_format'
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 500M
        run: |
          ccache -p || true
          cd build
          make -k -j2 cli_test
          ccache -s || true

      - name: Run tests
        if: matrix.name != 'clang_format'
        run: |
          cd build
          ctest . -j2 --output-on-failure
      - name: Run Format Check
        if: matrix.name == 'clang_format'
        run: |
          cd build
          make check_format
